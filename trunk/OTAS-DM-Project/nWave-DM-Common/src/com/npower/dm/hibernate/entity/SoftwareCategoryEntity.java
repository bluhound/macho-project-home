/**
 * $Header: /home/master/nWave-DM-Common/src/com/npower/dm/hibernate/entity/SoftwareCategoryEntity.java,v 1.8 2009/02/23 04:07:49 zhao Exp $
 * $Revision: 1.8 $
 * $Date: 2009/02/23 04:07:49 $
 *
 * ===============================================================================================
 * License, Version 1.1
 *
 * Copyright (c) 1994-2006 NPower Network Software Ltd.  All rights reserved.
 *
 * This SOURCE CODE FILE, which has been provided by NPower as part
 * of a NPower product for use ONLY by licensed users of the product,
 * includes CONFIDENTIAL and PROPRIETARY information of NPower.
 *
 * USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS
 * OF THE LICENSE STATEMENT AND LIMITED WARRANTY FURNISHED WITH
 * THE PRODUCT.
 *
 * IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD NPower, ITS RELATED
 * COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY CLAIMS
 * OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR DISTRIBUTION
 * OF YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES ARISING OUT OF
 * OR RESULTING FROM THE USE, MODIFICATION, OR DISTRIBUTION OF PROGRAMS
 * OR FILES CREATED FROM, BASED ON, AND/OR DERIVED FROM THIS SOURCE
 * CODE FILE.
 * ===============================================================================================
 */
package com.npower.dm.hibernate.entity;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import com.npower.dm.core.Software;
import com.npower.dm.core.SoftwareCategory;

/**
 * SoftwareCategoryEntity generated by MyEclipse Persistence Tools
 * 
 * @author Zhao DongLu
 * @version $Revision: 1.8 $ $Date: 2009/02/23 04:07:49 $
 */
public class SoftwareCategoryEntity extends AbstractSoftwareCategory implements java.io.Serializable, SoftwareCategory {

  // Constructors

  /**
   * 
   */
  private static final long serialVersionUID = 8276927539978892532L;

  /** default constructor */
  public SoftwareCategoryEntity() {
  }

  /** minimal constructor */
  public SoftwareCategoryEntity(long categoryId, String name) {
    super(categoryId, name);
  }

  /* (non-Javadoc)
   * @see com.npower.dm.core.SoftwareCategory#getSoftwares()
   */
  public Set<Software> getSoftwares() {
    Set<Software> result = new TreeSet<Software>();
    for (SoftwareCategoriesEntity e: this.getSoftwareCategoriesSet()) {
      result.add(e.getId().getSoftware());
    }
    return result;
  }
  
  public Set<Software> getAllOfSoftwares() {
    Set<Software> result = this.getSoftwares();
    for (SoftwareCategory child: this.getChildren()) {
        result.addAll(child.getAllOfSoftwares());
    }
    return result;
  }

  /* (non-Javadoc)
   * @see com.npower.dm.core.SoftwareCategory#getDescendants()
   */
  public Set<SoftwareCategory> getDescendants() {
    Set<SoftwareCategory> result = this.getChildren();
    for (SoftwareCategory descendant: this.getChildren()) {
        result.addAll(descendant.getDescendants());
    }
    return result;
  }

  /* (non-Javadoc)
   * @see com.npower.dm.core.SoftwareCategory#getTreeDepth()
   */
  public int getTreeDepth() {
    int depth = 0;
    SoftwareCategory parent = this.getParent();
    while (parent != null) {
          depth++;
          parent = parent.getParent();
    }
    return depth;
  }
  
  /* (non-Javadoc)
   * @see com.npower.dm.core.SoftwareCategory#getPath()
   */
  public List<String> getPath() {
    List<String> path = new ArrayList<String>();
    String name = this.getName();
    path.add(name);
    SoftwareCategory parent = this.getParent();
    // 运行中出现异常，循环不终止, 增加次数限制! 可能由于数据库的完整性造成此问题, 即存在部分回路的可能性.
    while (parent != null && path.size() < 10) {
          path.add(0, parent.getName());
          parent = parent.getParent();
    }
    return path;
  }
  
  /* (non-Javadoc)
 * @see com.npower.dm.core.SoftwareCategory#getPathAsString(java.lang.String)
 */
  public String getPathAsString(String delimit) {
    List<String> path = this.getPath();
    StringBuffer result = new StringBuffer();
    for (int i = 0; i < path.size(); i++) {
        result.append(path.get(i));
        if (i < path.size() - 1) {
           result.append(delimit);
        }
    }
    return result.toString();
  }

  /* (non-Javadoc)
   * @see com.npower.dm.core.SoftwareCategory#getPathAsString()
   */
  public String getPathAsString() {
    return this.getPathAsString(" > ");
  }

  /* (non-Javadoc)
   * @see java.lang.Comparable#compareTo(java.lang.Object)
   */
  public int compareTo(SoftwareCategory o) {
    if (o == null) {
       return 1;
    }
    int result = this.getPathAsString().compareToIgnoreCase(o.getPathAsString());
    if (result == 0) {
       result = this.getName().compareTo(o.getName());
    }
    return result;
  }

  /* (non-Javadoc)
   * @see com.npower.dm.core.SoftwareCategory#getPathAsCategories()
   */
  public List<SoftwareCategory> getPathAsCategories() {
    List<SoftwareCategory> path = new ArrayList<SoftwareCategory>();
    path.add(this);
    SoftwareCategory parent = this.getParent();
    while (parent != null) {
          path.add(0, parent);
          parent = parent.getParent();
    }
    return path;
  }
	
}
